From 16a1c1cfcb7602004e707cfa9eacbb4c0da8e5b6 Mon Sep 17 00:00:00 2001
From: koala <koala@brahmaos.io>
Date: Sun, 30 Sep 2018 13:51:16 +0800
Subject: [PATCH] Add processbar animation in DSNRemote

Change-Id: I972e49a85cc7332acc40946c71a6c5781c7ff390
Signed-off-by: koala <koala@brahmaos.io>
---
 res/layout/fragment_dsn_directory.xml              |  78 ++--
 res/values/attrs.xml                               |   8 +
 res/values/style.xml                               |  27 ++
 .../android/documentsui/DocumentsApplication.java  |  13 +-
 .../documentsui/dirlist/DSNDirectoryFragment.java  |  22 +-
 .../android/documentsui/services/BackupJob.java    |  12 +-
 .../services/DownloadDocumentsFromDSNJob.java      |   7 +-
 .../documentsui/widget/AVLoadingIndicatorView.java | 420 +++++++++++++++++++++
 src/com/android/documentsui/widget/Indicator.java  | 201 ++++++++++
 .../indicators/BallSpinFadeLoaderIndicator.java    | 114 ++++++
 10 files changed, 843 insertions(+), 59 deletions(-)
 create mode 100644 res/values/style.xml
 create mode 100644 src/com/android/documentsui/widget/AVLoadingIndicatorView.java
 create mode 100644 src/com/android/documentsui/widget/Indicator.java
 create mode 100644 src/com/android/documentsui/widget/indicators/BallSpinFadeLoaderIndicator.java

diff --git a/res/layout/fragment_dsn_directory.xml b/res/layout/fragment_dsn_directory.xml
index e9db1dc..d3d40e5 100644
--- a/res/layout/fragment_dsn_directory.xml
+++ b/res/layout/fragment_dsn_directory.xml
@@ -13,47 +13,55 @@
      See the License for the specific language governing permissions and
      limitations under the License.
 -->
-
-<com.android.documentsui.dirlist.AnimationView
+<FrameLayout
     xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    android:background="@color/directory_background"
-    android:outlineProvider="bounds"
-    android:elevation="4dp"
-    android:orientation="vertical">
-
-    <ProgressBar
-        android:id="@+id/progressbar"
+    >
+    <com.android.documentsui.dirlist.AnimationView
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:app="http://schemas.android.com/apk/res-auto"
+        android:id="@+id/animationview"
         android:layout_width="match_parent"
-        android:layout_height="@dimen/progress_bar_height"
-        android:indeterminate="true"
-        style="@style/TrimmedHorizontalProgressBar"
-        android:visibility="gone"/>
+        android:layout_height="match_parent"
+        android:background="@color/directory_background"
+        android:outlineProvider="bounds"
+	android:visibility = "invisible"
+        android:elevation="4dp"
+        android:orientation="vertical">
 
-    <com.android.documentsui.dirlist.DocumentsSwipeRefreshLayout
-        android:id="@+id/refresh_layout"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent">
-
-        <android.support.v7.widget.RecyclerView
-            android:id="@+id/dir_list"
+        <com.android.documentsui.dirlist.DocumentsSwipeRefreshLayout
+            android:id="@+id/refresh_layout"
             android:layout_width="match_parent"
-            android:layout_height="match_parent"
-            android:paddingStart="0dp"
-            android:paddingEnd="0dp"
-            android:paddingTop="0dp"
-            android:paddingBottom="0dp"
-            android:clipToPadding="false"
-            android:scrollbars="none"
-            android:drawSelectorOnTop="true"
-            app:fastScrollEnabled="true"
-            app:fastScrollVerticalThumbDrawable="@drawable/fast_scroll_thumb_drawable"
-            app:fastScrollVerticalTrackDrawable="@drawable/fast_scroll_track_drawable"
-            app:fastScrollHorizontalThumbDrawable="@drawable/fast_scroll_thumb_drawable"
-            app:fastScrollHorizontalTrackDrawable="@drawable/fast_scroll_track_drawable"/>
+            android:layout_height="match_parent">
+
+            <android.support.v7.widget.RecyclerView
+                android:id="@+id/dir_list"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:paddingStart="0dp"
+                android:paddingEnd="0dp"
+                android:paddingTop="0dp"
+                android:paddingBottom="0dp"
+                android:clipToPadding="false"
+                android:scrollbars="none"
+                android:drawSelectorOnTop="true"
+                app:fastScrollEnabled="true"
+                app:fastScrollVerticalThumbDrawable="@drawable/fast_scroll_thumb_drawable"
+                app:fastScrollVerticalTrackDrawable="@drawable/fast_scroll_track_drawable"
+                app:fastScrollHorizontalThumbDrawable="@drawable/fast_scroll_thumb_drawable"
+                app:fastScrollHorizontalTrackDrawable="@drawable/fast_scroll_track_drawable"/>
 
-    </com.android.documentsui.dirlist.DocumentsSwipeRefreshLayout>
+        </com.android.documentsui.dirlist.DocumentsSwipeRefreshLayout>
 
-</com.android.documentsui.dirlist.AnimationView>
+    </com.android.documentsui.dirlist.AnimationView>
+    <com.android.documentsui.widget.AVLoadingIndicatorView
+	android:id="@+id/avi"
+	android:layout_width="wrap_content"
+	android:layout_height="wrap_content"
+        android:gravity="center"
+        android:layout_gravity="center"
+	app:indicatorColor="#3C78C2"
+	style="@style/AVLoadingIndicatorView"/>
+</FrameLayout>
diff --git a/res/values/attrs.xml b/res/values/attrs.xml
index b4c0812..678d9b4 100644
--- a/res/values/attrs.xml
+++ b/res/values/attrs.xml
@@ -21,4 +21,12 @@
         <attr name="state_reject_drop" format="boolean"/>
         <attr name="state_copy" format="boolean"/>
     </declare-styleable>
+    <declare-styleable name="AVLoadingIndicatorView">
+        <attr name="minWidth" format="dimension" />
+        <attr name="maxWidth" format="dimension"/>
+        <attr name="minHeight" format="dimension" />
+        <attr name="maxHeight" format="dimension"/>
+        <attr name="indicatorName" format="string"/>
+        <attr name="indicatorColor" format="color"/>
+    </declare-styleable>
 </resources>
diff --git a/res/values/style.xml b/res/values/style.xml
new file mode 100644
index 0000000..bdc5352
--- /dev/null
+++ b/res/values/style.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <style name="AVLoadingIndicatorView">
+        <item name="minWidth">48dip</item>
+        <item name="maxWidth">48dip</item>
+        <item name="minHeight">48dip</item>
+        <item name="maxHeight">48dip</item>
+        <item name="indicatorName">BallPulseIndicator</item>
+    </style>
+
+    <style name="AVLoadingIndicatorView.Large">
+        <item name="minWidth">76dip</item>
+        <item name="maxWidth">76dip</item>
+        <item name="minHeight">76dip</item>
+        <item name="maxHeight">76dip</item>
+        <item name="indicatorName">BallPulseIndicator</item>
+    </style>
+
+    <style name="AVLoadingIndicatorView.Small">
+        <item name="minWidth">24dip</item>
+        <item name="maxWidth">24dip</item>
+        <item name="minHeight">24dip</item>
+        <item name="maxHeight">24dip</item>
+        <item name="indicatorName">BallPulseIndicator</item>
+    </style>
+
+</resources>
\ No newline at end of file
diff --git a/src/com/android/documentsui/DocumentsApplication.java b/src/com/android/documentsui/DocumentsApplication.java
index 0a70499..b77177b 100644
--- a/src/com/android/documentsui/DocumentsApplication.java
+++ b/src/com/android/documentsui/DocumentsApplication.java
@@ -49,7 +49,7 @@ public class DocumentsApplication extends Application {
     private DocumentClipper mClipper;
     private DragAndDropManager mDragAndDropManager;
     private Lookup<String, String> mFileTypeLookup;
-    public static IPFS mhandleIPFS;
+    private IPFS mIPFSHandle;
     private String accountStr;
 
     public Injector<?> mInjector;
@@ -92,6 +92,9 @@ public class DocumentsApplication extends Application {
     public static String getAccountStr(Context context) {
         return ((DocumentsApplication) context.getApplicationContext()).accountStr;
     }
+    public static IPFS getIPFSHandle(Context context) {
+        return ((DocumentsApplication) context.getApplicationContext()).mIPFSHandle;
+    }
 
     @Override
     public void onCreate() {
@@ -124,7 +127,7 @@ public class DocumentsApplication extends Application {
         final IntentFilter localeFilter = new IntentFilter();
         localeFilter.addAction(Intent.ACTION_LOCALE_CHANGED);
         registerReceiver(mCacheReceiver, localeFilter);
-        new Thread(new IPFSInitRunnable()).start();
+        new Thread(new DSNDateInitRunnable()).start();
 
     }
 
@@ -147,12 +150,10 @@ public class DocumentsApplication extends Application {
             }
         }
     };
-    class IPFSInitRunnable implements Runnable {
+    class DSNDateInitRunnable implements Runnable {
         @Override
         public void run() {
-            if(mhandleIPFS == null) {
-                mhandleIPFS = new IPFS("/ip4/127.0.0.1/tcp/5001");
-            }
+            mIPFSHandle = new IPFS("/ip4/127.0.0.1/tcp/5001");
             final UserManager um = (UserManager)getSystemService(Context.USER_SERVICE);
             int userId = UserHandle.myUserId();
             accountStr = um.getUserBrahmaAccount(userId);
diff --git a/src/com/android/documentsui/dirlist/DSNDirectoryFragment.java b/src/com/android/documentsui/dirlist/DSNDirectoryFragment.java
index 31eeb03..3e487c8 100644
--- a/src/com/android/documentsui/dirlist/DSNDirectoryFragment.java
+++ b/src/com/android/documentsui/dirlist/DSNDirectoryFragment.java
@@ -111,12 +111,14 @@ import com.android.documentsui.httpnetwork.*;
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.android.documentsui.httpnetwork.Networks;
+import com.android.documentsui.widget.AVLoadingIndicatorView;
 
 
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
+import java.util.concurrent.TimeUnit;
 import android.util.Log;
 import android.view.Menu;
 
@@ -146,6 +148,9 @@ public class DSNDirectoryFragment extends Fragment implements SwipeRefreshLayout
     private DSNModelObjectMetaAdapter mDSNModelObjectMetaAdapter;
     private MenuItem mMenuItem;
     private String ACOUNT_ID ;
+    private AVLoadingIndicatorView avi;
+    private AnimationView mAnimationView;
+
 
     protected LinearLayout mLinearLayout;
 
@@ -162,8 +167,15 @@ public class DSNDirectoryFragment extends Fragment implements SwipeRefreshLayout
         final View view = inflater.inflate(R.layout.fragment_dsn_directory, container, false);
 
 
-        mProgressBar = view.findViewById(R.id.progressbar);
-        assert(mProgressBar != null);
+        //mProgressBar = view.findViewById(R.id.progressbar);
+        //assert(mProgressBar != null);
+        //mProgressBar.setVisibility(View.VISIBLE);
+
+        avi= (AVLoadingIndicatorView) view.findViewById(R.id.avi);
+        avi.setIndicator("BallSpinFadeLoaderIndicator");
+        avi.show();
+
+        mAnimationView = (AnimationView)view.findViewById(R.id.animationview);
 
 
         mRecView = (RecyclerView) view.findViewById(R.id.dir_list);
@@ -185,7 +197,6 @@ public class DSNDirectoryFragment extends Fragment implements SwipeRefreshLayout
         mModel = mInjector.getModel();
         mModel.reset();
         mDSNModelObjectMetaAdapter = new DSNModelObjectMetaAdapter(this,getContext());
-
         LinearLayoutManager layoutManager = new LinearLayoutManager(getContext());
 
         mRecView.setLayoutManager(layoutManager);
@@ -196,7 +207,6 @@ public class DSNDirectoryFragment extends Fragment implements SwipeRefreshLayout
         mClipper = DocumentsApplication.getDocumentClipper(getContext());
         // Make the recycler and the empty views responsive to drop events when allowed.
         mRecView.setOnDragListener(mDragHoverListener);
-
         setHasOptionsMenu(true);
         ACOUNT_ID = DocumentsApplication.getAccountStr(getContext());
         return view;
@@ -205,7 +215,6 @@ public class DSNDirectoryFragment extends Fragment implements SwipeRefreshLayout
     @Override
     public void onStart() {
         super.onStart();
-
         mDSNModelObjectMetaAdapter.clearDNSModels();
         onStartNetworkRequest();
 
@@ -268,10 +277,11 @@ public class DSNDirectoryFragment extends Fragment implements SwipeRefreshLayout
                                 } catch (IOException e1) {
                                     e1.printStackTrace();
                                 }
+                                 mAnimationView.setVisibility(View.VISIBLE);
+                                 mDSNModelObjectMetaAdapter.notifyDataSetChanged();
                             } else {
                             }
 
-                            mDSNModelObjectMetaAdapter.notifyDataSetChanged();
                        }
 
            });
diff --git a/src/com/android/documentsui/services/BackupJob.java b/src/com/android/documentsui/services/BackupJob.java
index 145ad89..a2966ef 100644
--- a/src/com/android/documentsui/services/BackupJob.java
+++ b/src/com/android/documentsui/services/BackupJob.java
@@ -142,14 +142,12 @@ final class BackupJob extends ResolvedResourcesJob {
     @Override
     void start() {
         ContentResolver resolver = appContext.getContentResolver();
-        DocumentsApplication app = (DocumentsApplication) appContext.getApplicationContext();
-        mhandleIPFS = app.mhandleIPFS;
-        if(mhandleIPFS == null){
-            Log.e(TAG,"mhandleIPFS is null");
-        }
-
+        mhandleIPFS = DocumentsApplication.getIPFSHandle(appContext);
         ACOUNT_ID = DocumentsApplication.getAccountStr(appContext);
-
+        if((mhandleIPFS==null)|(ACOUNT_ID==null)){
+            Log.e(TAG, "mhandleIPFS or ACOUNT_ID is null");
+            return;
+        }
         DocumentInfo parentDoc;
         try {
             parentDoc = mParentUri != null
diff --git a/src/com/android/documentsui/services/DownloadDocumentsFromDSNJob.java b/src/com/android/documentsui/services/DownloadDocumentsFromDSNJob.java
index 5141d07..39e760a 100644
--- a/src/com/android/documentsui/services/DownloadDocumentsFromDSNJob.java
+++ b/src/com/android/documentsui/services/DownloadDocumentsFromDSNJob.java
@@ -83,19 +83,16 @@ public class DownloadDocumentsFromDSNJob implements Runnable {
 
     @Override
     public void run(){
+        mhandleIPFS = DocumentsApplication.getIPFSHandle(mappContext);
         String mObjectName = mObjectMeta.getobjectname();
         String mMimeType = mObjectMeta.getmimetype();
         String mHashKey = mObjectMeta.getobjectkey();
-        DocumentsApplication app = (DocumentsApplication) mappContext.getApplicationContext();
-        mhandleIPFS = app.mhandleIPFS;
 
         StringBuffer fileNameBuffer = new StringBuffer();
         fileNameBuffer.append(PATH_PREFIX);
         fileNameBuffer.append("/");
         fileNameBuffer.append(mObjectName);
         String fileNameBufferString = fileNameBuffer.toString();
-        IPFS mipfs = new IPFS("/ip4/127.0.0.1/tcp/5001");
-
 
         File filePath = new File(PATH_PREFIX);
         createDirToStoreage(filePath);
@@ -103,7 +100,7 @@ public class DownloadDocumentsFromDSNJob implements Runnable {
         try{
             int len;
             byte[] buffer = new byte[1024];
-            InputStream in = mipfs.catStream(Multihash.fromBase58(mHashKey));
+            InputStream in = mhandleIPFS.catStream(Multihash.fromBase58(mHashKey));
 
             try{
                     FileOutputStream fileOutput = new FileOutputStream(fileNameBufferString);
diff --git a/src/com/android/documentsui/widget/AVLoadingIndicatorView.java b/src/com/android/documentsui/widget/AVLoadingIndicatorView.java
new file mode 100644
index 0000000..0789302
--- /dev/null
+++ b/src/com/android/documentsui/widget/AVLoadingIndicatorView.java
@@ -0,0 +1,420 @@
+package com.android.documentsui.widget;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Rect;
+import android.graphics.drawable.Animatable;
+import android.graphics.drawable.Drawable;
+import android.os.Build;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.View;
+import android.view.animation.AnimationUtils;
+import com.android.documentsui.R;
+
+import com.android.documentsui.widget.indicators.BallSpinFadeLoaderIndicator;
+
+
+public class AVLoadingIndicatorView extends View {
+
+    private static final String TAG="AVLoadingIndicatorView";
+
+    private static final BallSpinFadeLoaderIndicator DEFAULT_INDICATOR=new BallSpinFadeLoaderIndicator();
+
+    private static final int MIN_SHOW_TIME = 500; // ms
+    private static final int MIN_DELAY = 500; // ms
+
+    private long mStartTime = -1;
+
+    private boolean mPostedHide = false;
+
+    private boolean mPostedShow = false;
+
+    private boolean mDismissed = false;
+
+    private final Runnable mDelayedHide = new Runnable() {
+
+        @Override
+        public void run() {
+            mPostedHide = false;
+            mStartTime = -1;
+            setVisibility(View.GONE);
+        }
+    };
+
+    private final Runnable mDelayedShow = new Runnable() {
+
+        @Override
+        public void run() {
+            mPostedShow = false;
+            if (!mDismissed) {
+                mStartTime = System.currentTimeMillis();
+                setVisibility(View.VISIBLE);
+            }
+        }
+    };
+
+    int mMinWidth;
+    int mMaxWidth;
+    int mMinHeight;
+    int mMaxHeight;
+
+    private Indicator mIndicator;
+    private int mIndicatorColor;
+
+    private boolean mShouldStartAnimationDrawable;
+
+    public AVLoadingIndicatorView(Context context) {
+        super(context);
+        init(context, null,0,0);
+    }
+
+    public AVLoadingIndicatorView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init(context, attrs,0,R.style.AVLoadingIndicatorView);
+    }
+
+    public AVLoadingIndicatorView(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        init(context, attrs,defStyleAttr,R.style.AVLoadingIndicatorView);
+    }
+
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
+    public AVLoadingIndicatorView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+        init(context,attrs,defStyleAttr,R.style.AVLoadingIndicatorView);
+    }
+
+    private void init(Context context,AttributeSet attrs,int defStyleAttr, int defStyleRes) {
+        mMinWidth = 24;
+        mMaxWidth = 48;
+        mMinHeight = 24;
+        mMaxHeight = 48;
+
+        final TypedArray a = context.obtainStyledAttributes(
+                attrs, R.styleable.AVLoadingIndicatorView, defStyleAttr, defStyleRes);
+
+        mMinWidth = a.getDimensionPixelSize(R.styleable.AVLoadingIndicatorView_minWidth, mMinWidth);
+        mMaxWidth = a.getDimensionPixelSize(R.styleable.AVLoadingIndicatorView_maxWidth, mMaxWidth);
+        mMinHeight = a.getDimensionPixelSize(R.styleable.AVLoadingIndicatorView_minHeight, mMinHeight);
+        mMaxHeight = a.getDimensionPixelSize(R.styleable.AVLoadingIndicatorView_maxHeight, mMaxHeight);
+        String indicatorName=a.getString(R.styleable.AVLoadingIndicatorView_indicatorName);
+        mIndicatorColor=a.getColor(R.styleable.AVLoadingIndicatorView_indicatorColor, Color.WHITE);
+        setIndicator(indicatorName);
+        if (mIndicator==null){
+            setIndicator(DEFAULT_INDICATOR);
+        }
+        a.recycle();
+    }
+
+    public Indicator getIndicator() {
+        return mIndicator;
+    }
+
+    public void setIndicator(Indicator d) {
+        if (mIndicator != d) {
+            if (mIndicator != null) {
+                mIndicator.setCallback(null);
+                unscheduleDrawable(mIndicator);
+            }
+
+            mIndicator = d;
+            //need to set indicator color again if you didn't specified when you update the indicator .
+            setIndicatorColor(mIndicatorColor);
+            if (d != null) {
+                d.setCallback(this);
+            }
+            postInvalidate();
+        }
+    }
+
+
+    /**
+     * setIndicatorColor(0xFF00FF00)
+     * or
+     * setIndicatorColor(Color.BLUE)
+     * or
+     * setIndicatorColor(Color.parseColor("#FF4081"))
+     * or
+     * setIndicatorColor(0xFF00FF00)
+     * or
+     * setIndicatorColor(getResources().getColor(android.R.color.black))
+     * @param color
+     */
+    public void setIndicatorColor(int color){
+        this.mIndicatorColor=color;
+        mIndicator.setColor(color);
+    }
+
+
+    /**
+     * You should pay attention to pass this parameter with two way:
+     * for example:
+     * 1. Only class Name,like "SimpleIndicator".(This way would use default package name with
+     * "com.wang.avi.indicators")
+     * 2. Class name with full package,like "com.my.android.indicators.SimpleIndicator".
+     * @param indicatorName the class must be extend Indicator .
+     */
+    public void setIndicator(String indicatorName){
+        if (TextUtils.isEmpty(indicatorName)){
+            return;
+        }
+        StringBuilder drawableClassName=new StringBuilder();
+        if (!indicatorName.contains(".")){
+            String defaultPackageName=getClass().getPackage().getName();
+            drawableClassName.append(defaultPackageName)
+                    .append(".indicators")
+                    .append(".");
+        }
+        drawableClassName.append(indicatorName);
+        try {
+            Class<?> drawableClass = Class.forName(drawableClassName.toString());
+            Indicator indicator = (Indicator) drawableClass.newInstance();
+            setIndicator(indicator);
+        } catch (ClassNotFoundException e) {
+            Log.e(TAG,"Didn't find your class , check the name again !");
+        } catch (InstantiationException e) {
+            e.printStackTrace();
+        } catch (IllegalAccessException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public void smoothToShow(){
+        startAnimation(AnimationUtils.loadAnimation(getContext(),android.R.anim.fade_in));
+        setVisibility(VISIBLE);
+    }
+
+    public void smoothToHide(){
+        startAnimation(AnimationUtils.loadAnimation(getContext(),android.R.anim.fade_out));
+        setVisibility(GONE);
+    }
+
+    public void hide() {
+        mDismissed = true;
+        removeCallbacks(mDelayedShow);
+        long diff = System.currentTimeMillis() - mStartTime;
+        if (diff >= MIN_SHOW_TIME || mStartTime == -1) {
+            // The progress spinner has been shown long enough
+            // OR was not shown yet. If it wasn't shown yet,
+            // it will just never be shown.
+            setVisibility(View.GONE);
+        } else {
+            // The progress spinner is shown, but not long enough,
+            // so put a delayed message in to hide it when its been
+            // shown long enough.
+            if (!mPostedHide) {
+                postDelayed(mDelayedHide, MIN_SHOW_TIME - diff);
+                mPostedHide = true;
+            }
+        }
+    }
+
+    public void show() {
+        // Reset the start time.
+        mStartTime = -1;
+        mDismissed = false;
+        removeCallbacks(mDelayedHide);
+        if (!mPostedShow) {
+            postDelayed(mDelayedShow, MIN_DELAY);
+            mPostedShow = true;
+        }
+    }
+
+    @Override
+    protected boolean verifyDrawable(Drawable who) {
+        return who == mIndicator
+                || super.verifyDrawable(who);
+    }
+
+    void startAnimation() {
+        if (getVisibility() != VISIBLE) {
+            return;
+        }
+
+        if (mIndicator instanceof Animatable) {
+            mShouldStartAnimationDrawable = true;
+        }
+        postInvalidate();
+    }
+
+    void stopAnimation() {
+        if (mIndicator instanceof Animatable) {
+            mIndicator.stop();
+            mShouldStartAnimationDrawable = false;
+        }
+        postInvalidate();
+    }
+
+    @Override
+    public void setVisibility(int v) {
+        if (getVisibility() != v) {
+            super.setVisibility(v);
+            if (v == GONE || v == INVISIBLE) {
+                stopAnimation();
+            } else {
+                startAnimation();
+            }
+        }
+    }
+
+    @Override
+    protected void onVisibilityChanged(View changedView, int visibility) {
+        super.onVisibilityChanged(changedView, visibility);
+        if (visibility == GONE || visibility == INVISIBLE) {
+            stopAnimation();
+        } else {
+            startAnimation();
+        }
+    }
+
+    @Override
+    public void invalidateDrawable(Drawable dr) {
+        if (verifyDrawable(dr)) {
+            final Rect dirty = dr.getBounds();
+            final int scrollX = getScrollX() + getPaddingLeft();
+            final int scrollY = getScrollY() + getPaddingTop();
+
+            invalidate(dirty.left + scrollX, dirty.top + scrollY,
+                    dirty.right + scrollX, dirty.bottom + scrollY);
+        } else {
+            super.invalidateDrawable(dr);
+        }
+    }
+
+    @Override
+    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
+        updateDrawableBounds(w, h);
+    }
+
+    private void updateDrawableBounds(int w, int h) {
+        // onDraw will translate the canvas so we draw starting at 0,0.
+        // Subtract out padding for the purposes of the calculations below.
+        w -= getPaddingRight() + getPaddingLeft();
+        h -= getPaddingTop() + getPaddingBottom();
+
+        int right = w;
+        int bottom = h;
+        int top = 0;
+        int left = 0;
+
+        if (mIndicator != null) {
+            // Maintain aspect ratio. Certain kinds of animated drawables
+            // get very confused otherwise.
+            final int intrinsicWidth = mIndicator.getIntrinsicWidth();
+            final int intrinsicHeight = mIndicator.getIntrinsicHeight();
+            final float intrinsicAspect = (float) intrinsicWidth / intrinsicHeight;
+            final float boundAspect = (float) w / h;
+            if (intrinsicAspect != boundAspect) {
+                if (boundAspect > intrinsicAspect) {
+                    // New width is larger. Make it smaller to match height.
+                    final int width = (int) (h * intrinsicAspect);
+                    left = (w - width) / 2;
+                    right = left + width;
+                } else {
+                    // New height is larger. Make it smaller to match width.
+                    final int height = (int) (w * (1 / intrinsicAspect));
+                    top = (h - height) / 2;
+                    bottom = top + height;
+                }
+            }
+            mIndicator.setBounds(left, top, right, bottom);
+        }
+    }
+
+    @Override
+    protected synchronized void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+        drawTrack(canvas);
+    }
+
+    void drawTrack(Canvas canvas) {
+        final Drawable d = mIndicator;
+        if (d != null) {
+            // Translate canvas so a indeterminate circular progress bar with padding
+            // rotates properly in its animation
+            final int saveCount = canvas.save();
+
+            canvas.translate(getPaddingLeft(), getPaddingTop());
+
+            d.draw(canvas);
+            canvas.restoreToCount(saveCount);
+
+            if (mShouldStartAnimationDrawable && d instanceof Animatable) {
+                ((Animatable) d).start();
+                mShouldStartAnimationDrawable = false;
+            }
+        }
+    }
+
+    @Override
+    protected synchronized void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        int dw = 0;
+        int dh = 0;
+
+        final Drawable d = mIndicator;
+        if (d != null) {
+            dw = Math.max(mMinWidth, Math.min(mMaxWidth, d.getIntrinsicWidth()));
+            dh = Math.max(mMinHeight, Math.min(mMaxHeight, d.getIntrinsicHeight()));
+        }
+
+        updateDrawableState();
+
+        dw += getPaddingLeft() + getPaddingRight();
+        dh += getPaddingTop() + getPaddingBottom();
+
+        final int measuredWidth = resolveSizeAndState(dw, widthMeasureSpec, 0);
+        final int measuredHeight = resolveSizeAndState(dh, heightMeasureSpec, 0);
+        setMeasuredDimension(measuredWidth, measuredHeight);
+    }
+
+    @Override
+    protected void drawableStateChanged() {
+        super.drawableStateChanged();
+        updateDrawableState();
+    }
+
+    private void updateDrawableState() {
+        final int[] state = getDrawableState();
+        if (mIndicator != null && mIndicator.isStateful()) {
+            mIndicator.setState(state);
+        }
+    }
+
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
+    @Override
+    public void drawableHotspotChanged(float x, float y) {
+        super.drawableHotspotChanged(x, y);
+
+        if (mIndicator != null) {
+            mIndicator.setHotspot(x, y);
+        }
+    }
+
+    @Override
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        startAnimation();
+        removeCallbacks();
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        stopAnimation();
+        // This should come after stopAnimation(), otherwise an invalidate message remains in the
+        // queue, which can prevent the entire view hierarchy from being GC'ed during a rotation
+        super.onDetachedFromWindow();
+        removeCallbacks();
+    }
+
+    private void removeCallbacks() {
+        removeCallbacks(mDelayedHide);
+        removeCallbacks(mDelayedShow);
+    }
+
+
+}
diff --git a/src/com/android/documentsui/widget/Indicator.java b/src/com/android/documentsui/widget/Indicator.java
new file mode 100644
index 0000000..c0af28c
--- /dev/null
+++ b/src/com/android/documentsui/widget/Indicator.java
@@ -0,0 +1,201 @@
+package com.android.documentsui.widget;
+
+import android.animation.ValueAnimator;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.ColorFilter;
+import android.graphics.Paint;
+import android.graphics.PixelFormat;
+import android.graphics.Rect;
+import android.graphics.drawable.Animatable;
+import android.graphics.drawable.Drawable;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+
+/**
+ * Created by Jack Wang on 2016/8/5.
+ */
+
+public abstract class Indicator extends Drawable implements Animatable {
+
+    private HashMap<ValueAnimator,ValueAnimator.AnimatorUpdateListener> mUpdateListeners=new HashMap<>();
+
+    private ArrayList<ValueAnimator> mAnimators;
+    private int alpha = 255;
+    private static final Rect ZERO_BOUNDS_RECT = new Rect();
+    protected Rect drawBounds = ZERO_BOUNDS_RECT;
+
+    private boolean mHasAnimators;
+
+    private Paint mPaint=new Paint();
+
+    public Indicator(){
+        mPaint.setColor(Color.WHITE);
+        mPaint.setStyle(Paint.Style.FILL);
+        mPaint.setAntiAlias(true);
+    }
+
+    public int getColor() {
+        return mPaint.getColor();
+    }
+
+    public void setColor(int color) {
+        mPaint.setColor(color);
+    }
+
+    @Override
+    public void setAlpha(int alpha) {
+        this.alpha = alpha;
+    }
+
+    @Override
+    public int getAlpha() {
+        return alpha;
+    }
+
+    @Override
+    public int getOpacity() {
+        return PixelFormat.OPAQUE;
+    }
+
+    @Override
+    public void setColorFilter(ColorFilter colorFilter) {
+
+    }
+
+    @Override
+    public void draw(Canvas canvas) {
+        draw(canvas,mPaint);
+    }
+
+    public abstract void draw(Canvas canvas, Paint paint);
+
+    public abstract ArrayList<ValueAnimator> onCreateAnimators();
+
+    @Override
+    public void start() {
+        ensureAnimators();
+
+        if (mAnimators == null) {
+            return;
+        }
+
+        // If the animators has not ended, do nothing.
+        if (isStarted()) {
+            return;
+        }
+        startAnimators();
+        invalidateSelf();
+    }
+
+    private void startAnimators() {
+        for (int i = 0; i < mAnimators.size(); i++) {
+            ValueAnimator animator = mAnimators.get(i);
+
+            //when the animator restart , add the updateListener again because they
+            // was removed by animator stop .
+            ValueAnimator.AnimatorUpdateListener updateListener=mUpdateListeners.get(animator);
+            if (updateListener!=null){
+                animator.addUpdateListener(updateListener);
+            }
+
+            animator.start();
+        }
+    }
+
+    private void stopAnimators() {
+        if (mAnimators!=null){
+            for (ValueAnimator animator : mAnimators) {
+                if (animator != null && animator.isStarted()) {
+                    animator.removeAllUpdateListeners();
+                    animator.end();
+                }
+            }
+        }
+    }
+
+    private void ensureAnimators() {
+        if (!mHasAnimators) {
+            mAnimators = onCreateAnimators();
+            mHasAnimators = true;
+        }
+    }
+
+    @Override
+    public void stop() {
+        stopAnimators();
+    }
+
+    private boolean isStarted() {
+        for (ValueAnimator animator : mAnimators) {
+            return animator.isStarted();
+        }
+        return false;
+    }
+
+    @Override
+    public boolean isRunning() {
+        for (ValueAnimator animator : mAnimators) {
+            return animator.isRunning();
+        }
+        return false;
+    }
+
+    /**
+     *  Your should use this to add AnimatorUpdateListener when
+     *  create animator , otherwise , animator doesn't work when
+     *  the animation restart .
+     * @param updateListener
+     */
+    public void addUpdateListener(ValueAnimator animator, ValueAnimator.AnimatorUpdateListener updateListener){
+        mUpdateListeners.put(animator,updateListener);
+    }
+
+    @Override
+    protected void onBoundsChange(Rect bounds) {
+        super.onBoundsChange(bounds);
+        setDrawBounds(bounds);
+    }
+
+    public void setDrawBounds(Rect drawBounds) {
+        setDrawBounds(drawBounds.left, drawBounds.top, drawBounds.right, drawBounds.bottom);
+    }
+
+    public void setDrawBounds(int left, int top, int right, int bottom) {
+        this.drawBounds = new Rect(left, top, right, bottom);
+    }
+
+    public void postInvalidate(){
+        invalidateSelf();
+    }
+
+    public Rect getDrawBounds() {
+        return drawBounds;
+    }
+
+    public int getWidth(){
+        return drawBounds.width();
+    }
+
+    public int getHeight(){
+        return drawBounds.height();
+    }
+
+    public int centerX(){
+        return drawBounds.centerX();
+    }
+
+    public int centerY(){
+        return drawBounds.centerY();
+    }
+
+    public float exactCenterX(){
+        return drawBounds.exactCenterX();
+    }
+
+    public float exactCenterY(){
+        return drawBounds.exactCenterY();
+    }
+
+}
diff --git a/src/com/android/documentsui/widget/indicators/BallSpinFadeLoaderIndicator.java b/src/com/android/documentsui/widget/indicators/BallSpinFadeLoaderIndicator.java
new file mode 100644
index 0000000..6d08119
--- /dev/null
+++ b/src/com/android/documentsui/widget/indicators/BallSpinFadeLoaderIndicator.java
@@ -0,0 +1,114 @@
+package com.android.documentsui.widget.indicators;
+
+import android.graphics.Canvas;
+import android.graphics.Paint;
+
+import android.animation.ValueAnimator;
+import com.android.documentsui.widget.Indicator;
+
+import java.util.ArrayList;
+
+/**
+ * Created by Jack on 2015/10/20.
+ */
+public class BallSpinFadeLoaderIndicator extends Indicator {
+
+    public static final float SCALE=1.0f;
+
+    public static final int ALPHA=255;
+
+    float[] scaleFloats=new float[]{SCALE,
+            SCALE,
+            SCALE,
+            SCALE,
+            SCALE,
+            SCALE,
+            SCALE,
+            SCALE};
+
+    int[] alphas=new int[]{ALPHA,
+            ALPHA,
+            ALPHA,
+            ALPHA,
+            ALPHA,
+            ALPHA,
+            ALPHA,
+            ALPHA};
+
+
+    @Override
+    public void draw(Canvas canvas, Paint paint) {
+        float radius=getWidth()/10;
+        for (int i = 0; i < 8; i++) {
+            canvas.save();
+            Point point=circleAt(getWidth(),getHeight(),getWidth()/2-radius,i*(Math.PI/4));
+            canvas.translate(point.x,point.y);
+            canvas.scale(scaleFloats[i],scaleFloats[i]);
+            paint.setAlpha(alphas[i]);
+            canvas.drawCircle(0,0,radius,paint);
+            canvas.restore();
+        }
+    }
+
+    @Override
+    public ArrayList<ValueAnimator> onCreateAnimators() {
+        ArrayList<ValueAnimator> animators=new ArrayList<>();
+        int[] delays= {0, 120, 240, 360, 480, 600, 720, 780, 840};
+        for (int i = 0; i < 8; i++) {
+            final int index=i;
+            ValueAnimator scaleAnim=ValueAnimator.ofFloat(1,0.4f,1);
+            scaleAnim.setDuration(1000);
+            scaleAnim.setRepeatCount(-1);
+            scaleAnim.setStartDelay(delays[i]);
+            addUpdateListener(scaleAnim,new ValueAnimator.AnimatorUpdateListener() {
+                @Override
+                public void onAnimationUpdate(ValueAnimator animation) {
+                    scaleFloats[index] = (float) animation.getAnimatedValue();
+                    postInvalidate();
+                }
+            });
+
+            ValueAnimator alphaAnim=ValueAnimator.ofInt(255, 77, 255);
+            alphaAnim.setDuration(1000);
+            alphaAnim.setRepeatCount(-1);
+            alphaAnim.setStartDelay(delays[i]);
+            addUpdateListener(alphaAnim,new ValueAnimator.AnimatorUpdateListener() {
+                @Override
+                public void onAnimationUpdate(ValueAnimator animation) {
+                    alphas[index] = (int) animation.getAnimatedValue();
+                    postInvalidate();
+                }
+            });
+            animators.add(scaleAnim);
+            animators.add(alphaAnim);
+        }
+        return animators;
+    }
+
+    /**
+     * 圆O的圆心为(a,b),半径为R,点A与到X轴的为角α.
+     *则点A的坐标为(a+R*cosα,b+R*sinα)
+     * @param width
+     * @param height
+     * @param radius
+     * @param angle
+     * @return
+     */
+    Point circleAt(int width,int height,float radius,double angle){
+        float x= (float) (width/2+radius*(Math.cos(angle)));
+        float y= (float) (height/2+radius*(Math.sin(angle)));
+        return new Point(x,y);
+    }
+
+    final class Point{
+        public float x;
+        public float y;
+
+        public Point(float x, float y){
+            this.x=x;
+            this.y=y;
+        }
+    }
+
+
+}
-- 
2.7.4

