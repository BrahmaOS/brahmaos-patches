From d9f8cd593d5e2d02342a605e50fc5e5f8052d3df Mon Sep 17 00:00:00 2001
From: koala <koala@brahmaos.io>
Date: Tue, 28 Aug 2018 10:57:05 +0800
Subject: [PATCH] Add backup menu in DocumentsUI

Change-Id: I382efa3f22c5c7d8636a17fb7e40ea970c57d00c
Signed-off-by: koala <koala@brahmaos.io>
---
 res/menu/action_mode_menu.xml                      | 11 +++++
 res/menu/activity.xml                              | 13 ++++++
 res/values/strings.xml                             |  5 +++
 .../android/documentsui/AbstractActionHandler.java |  5 +++
 src/com/android/documentsui/ActionHandler.java     |  4 ++
 src/com/android/documentsui/MenuManager.java       |  9 ++++
 .../android/documentsui/files/ActionHandler.java   | 50 ++++++++++++++++++++++
 7 files changed, 97 insertions(+)

diff --git a/res/menu/action_mode_menu.xml b/res/menu/action_mode_menu.xml
index ba23816..9eeb2ae 100644
--- a/res/menu/action_mode_menu.xml
+++ b/res/menu/action_mode_menu.xml
@@ -72,4 +72,15 @@
         android:title="@string/menu_view_in_owner"
         android:showAsAction="never"
         android:visible="false" />
+    <item
+        android:id="@+id/action_menu_backup"
+        android:title="@string/menu_backup"
+        android:showAsAction="never"
+        android:visible="false" />
+  <item
+        android:id="@+id/action_menu_download"
+        android:title="@string/menu_download"
+        android:showAsAction="never"
+        android:visible="false" />
+
 </menu>
diff --git a/res/menu/activity.xml b/res/menu/activity.xml
index ce51e75..580137d 100644
--- a/res/menu/activity.xml
+++ b/res/menu/activity.xml
@@ -77,5 +77,18 @@
             android:title="@string/menu_settings"
             android:showAsAction="never"
             android:visible="false" />
+        <item
+            android:id="@+id/option_menu_backup"
+            android:title="@string/menu_backup"
+            android:alphabeticShortcut="s"
+            android:showAsAction="never"
+            android:visible="false" />
+       <item
+            android:id="@+id/option_menu_download"
+            android:title="@string/menu_download"
+            android:alphabeticShortcut="f"
+            android:showAsAction="never"
+            android:visible="false" />
+
     </group>
 </menu>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index a5ecfac..646504d 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -74,6 +74,8 @@
 
     <!-- Menu item title that creates a new window in the activity [CHAR LIMIT=28] -->
     <string name="menu_new_window">New window</string>
+    <string name="menu_backup">Backup files</string>
+    <string name="menu_download">Get files</string>
     <!-- Menu item title that cuts the selected documents to clipboard [CHAR LIMIT=28] -->
     <string name="menu_cut_to_clipboard">Cut</string>
     <!-- Menu item title that copies the selected documents to clipboard [CHAR LIMIT=28] -->
@@ -159,6 +161,9 @@
 
     <!-- Title of storage root location that contains recently modified or used documents [CHAR LIMIT=24] -->
     <string name="root_recent">Recent</string>
+
+    <!-- Title of ipfs storage location that contains recently modified or used documents [CHAR LIMIT=24] -->
+    <string name="root_ipfsstore">ipfs</string>
     <!-- Subtitle of storage root indicating the total free space available, in bytes [CHAR LIMIT=24] -->
     <string name="root_available_bytes"><xliff:g id="size" example="3GB">%1$s</xliff:g> free</string>
 
diff --git a/src/com/android/documentsui/AbstractActionHandler.java b/src/com/android/documentsui/AbstractActionHandler.java
index 0faab6e..9e3f184 100644
--- a/src/com/android/documentsui/AbstractActionHandler.java
+++ b/src/com/android/documentsui/AbstractActionHandler.java
@@ -444,6 +444,11 @@ public abstract class AbstractActionHandler<T extends Activity & CommonAddons>
     public void deleteSelectedDocuments() {
         throw new UnsupportedOperationException("Delete not supported!");
     }
+    @Override
+    public void backupDocuments() {
+        throw new UnsupportedOperationException("Backup not supported!");
+    }
+
 
     @Override
     public void shareSelectedDocuments() {
diff --git a/src/com/android/documentsui/ActionHandler.java b/src/com/android/documentsui/ActionHandler.java
index 6b0e077..ca7d699 100644
--- a/src/com/android/documentsui/ActionHandler.java
+++ b/src/com/android/documentsui/ActionHandler.java
@@ -134,6 +134,10 @@ public interface ActionHandler {
      * In general, selected = selection or single focused item
      */
     void deleteSelectedDocuments();
+    /**
+     * In general, selected = selection or single focused item
+     */
+	void backupDocuments();
 
     void shareSelectedDocuments();
 
diff --git a/src/com/android/documentsui/MenuManager.java b/src/com/android/documentsui/MenuManager.java
index a8c9767..562d0cb 100644
--- a/src/com/android/documentsui/MenuManager.java
+++ b/src/com/android/documentsui/MenuManager.java
@@ -64,6 +64,9 @@ public abstract class MenuManager {
         updateExtractTo(menu.findItem(R.id.action_menu_extract_to), selection);
         updateViewInOwner(menu.findItem(R.id.action_menu_view_in_owner), selection);
         updateInspector(menu.findItem(R.id.action_menu_inspector), selection);
+		updateBackup(menu.findItem(R.id.action_menu_backup));
+		updateGet(menu.findItem(R.id.action_menu_download));
+
 
         Menus.disableHiddenItems(menu);
     }
@@ -78,6 +81,9 @@ public abstract class MenuManager {
                 menu.findItem(R.id.option_menu_list));
         updateAdvanced(menu.findItem(R.id.option_menu_advanced));
         updateDebug(menu.findItem(R.id.option_menu_debug));
+        updateBackup(menu.findItem(R.id.option_menu_backup));
+		updateGet(menu.findItem(R.id.option_menu_download));
+		updateDebug(menu.findItem(R.id.option_menu_debug));
 
         Menus.disableHiddenItems(menu);
     }
@@ -310,6 +316,9 @@ public abstract class MenuManager {
     protected abstract void updateSelectAll(MenuItem selectAll);
     protected abstract void updateCreateDir(MenuItem createDir);
 
+    protected abstract void updateBackup(MenuItem storedecent);
+    protected abstract void updateGet(MenuItem Downdecent);
+
     /**
      * Access to meta data about the selection.
      */
diff --git a/src/com/android/documentsui/files/ActionHandler.java b/src/com/android/documentsui/files/ActionHandler.java
index 922f0c0..9072e28 100644
--- a/src/com/android/documentsui/files/ActionHandler.java
+++ b/src/com/android/documentsui/files/ActionHandler.java
@@ -337,6 +337,56 @@ public class ActionHandler<T extends Activity & Addons> extends AbstractActionHa
 
         mDialogs.confirmDelete(docs, result);
     }
+    @Override
+    public void backupDocuments() {
+        Metrics.logUserAction(mActivity, Metrics.USER_ACTION_DELETE);
+        Selection selection = getSelectedOrFocused();
+
+        if (selection.isEmpty()) {
+            return;
+        }
+
+        final @Nullable DocumentInfo srcParent = mState.stack.peek();
+
+        // Model must be accessed in UI thread, since underlying cursor is not threadsafe.
+        List<DocumentInfo> docs = mModel.getDocuments(selection);
+
+        ConfirmationCallback result = (@Result int code) -> {
+            // share the news with our caller, be it good or bad.
+            mActionModeAddons.finishOnConfirmed(code);
+
+            if (code != ConfirmationCallback.CONFIRM) {
+                return;
+            }
+
+            UrisSupplier srcs;
+            try {
+                srcs = UrisSupplier.create(
+                        selection,
+                        mModel::getItemUri,
+                        mClipStore);
+            } catch (Exception e) {
+                Log.e(TAG,"Failed to delete a file because we were unable to get item URIs.", e);
+                mDialogs.showFileOperationStatus(
+                        FileOperations.Callback.STATUS_FAILED,
+                        FileOperationService.OPERATION_BACKUP,
+                        selection.size());
+                return;
+            }
+
+            FileOperation operation = new FileOperation.Builder()
+                    .withOpType(FileOperationService.OPERATION_BACKUP)
+                    .withDestination(mState.stack)
+                    .withSrcs(srcs)
+                    .withSrcParent(srcParent == null ? null : srcParent.derivedUri)
+                    .build();
+
+            FileOperations.start(mActivity, operation, mDialogs::showFileOperationStatus,
+                    FileOperations.createJobId());
+        };
+
+        mDialogs.confirmDelete(docs, result);
+    }
 
     @Override
     public void shareSelectedDocuments() {
-- 
2.7.4

