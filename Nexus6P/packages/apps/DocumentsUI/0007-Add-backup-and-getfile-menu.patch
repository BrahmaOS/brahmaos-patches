From 004c2b2a0d8143b43ca287d49b59dd8f99519d3c Mon Sep 17 00:00:00 2001
From: koala <koala@brahmaos.io>
Date: Mon, 10 Sep 2018 10:42:21 +0800
Subject: [PATCH] Add backup and getfile menu

Change-Id: Ie28027a9931fbf5096a0cc18227b5e555de049f5
Signed-off-by: koala <koala@brahmaos.io>
---
 AndroidManifest.xml                                |  2 +-
 res/menu/activity.xml                              | 13 ----
 src/com/android/documentsui/DocumentsAccess.java   |  1 +
 .../android/documentsui/DocumentsApplication.java  | 20 +++++-
 src/com/android/documentsui/MenuManager.java       |  2 -
 .../documentsui/dirlist/DirectoryFragment.java     | 11 +++-
 .../android/documentsui/picker/MenuManager.java    | 11 ++++
 .../android/documentsui/services/BackupJob.java    | 41 +++++++++++--
 .../documentsui/services/FileOperation.java        | 71 ++++++++++++++++++++++
 .../documentsui/services/FileOperationService.java |  5 +-
 src/com/android/documentsui/services/Job.java      |  8 ++-
 11 files changed, 157 insertions(+), 28 deletions(-)

diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 716e611..83bb2b8 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -1,6 +1,6 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
         package="com.android.documentsui">
-
+    <uses-sdk android:minSdkVersion="22" android:targetSdkVersion="23" />
     <uses-permission android:name="android.permission.GET_APP_GRANTED_URI_PERMISSIONS" />
     <uses-permission android:name="android.permission.MANAGE_DOCUMENTS" />
     <uses-permission android:name="android.permission.REMOVE_TASKS" />
diff --git a/res/menu/activity.xml b/res/menu/activity.xml
index e825778..ce51e75 100644
--- a/res/menu/activity.xml
+++ b/res/menu/activity.xml
@@ -77,18 +77,5 @@
             android:title="@string/menu_settings"
             android:showAsAction="never"
             android:visible="false" />
-        <item
-            android:id="@+id/option_menu_backup"
-            android:title="@string/menu_backup"
-            android:alphabeticShortcut="s"
-            android:showAsAction="never"
-            android:visible="false" />
-       <item
-            android:id="@+id/option_menu_download"
-            android:title="@string/menu_getdocuments"
-            android:alphabeticShortcut="f"
-            android:showAsAction="never"
-            android:visible="false" />
-
     </group>
 </menu>
diff --git a/src/com/android/documentsui/DocumentsAccess.java b/src/com/android/documentsui/DocumentsAccess.java
index 90c344a..d880e33 100644
--- a/src/com/android/documentsui/DocumentsAccess.java
+++ b/src/com/android/documentsui/DocumentsAccess.java
@@ -76,6 +76,7 @@ public interface DocumentsAccess {
         @Override
         public @Nullable DocumentInfo getDocument(Uri uri) {
             try {
+                Log.d("XULU_LOG",TAG + ":getRootDocument:"+uri.toString());
                 return DocumentInfo.fromUri(mContext.getContentResolver(), uri);
             } catch (FileNotFoundException e) {
                 Log.w(TAG, "Couldn't create DocumentInfo for uri: " + uri);
diff --git a/src/com/android/documentsui/DocumentsApplication.java b/src/com/android/documentsui/DocumentsApplication.java
index 4c9c65f..bf09fb7 100644
--- a/src/com/android/documentsui/DocumentsApplication.java
+++ b/src/com/android/documentsui/DocumentsApplication.java
@@ -33,6 +33,9 @@ import com.android.documentsui.clipping.ClipStorage;
 import com.android.documentsui.clipping.ClipStore;
 import com.android.documentsui.clipping.DocumentClipper;
 import com.android.documentsui.roots.ProvidersCache;
+import android.util.Log;
+
+import io.ipfs.api.IPFS;
 
 public class DocumentsApplication extends Application {
     private static final long PROVIDER_ANR_TIMEOUT = 20 * DateUtils.SECOND_IN_MILLIS;
@@ -43,6 +46,9 @@ public class DocumentsApplication extends Application {
     private DocumentClipper mClipper;
     private DragAndDropManager mDragAndDropManager;
     private Lookup<String, String> mFileTypeLookup;
+    public static IPFS mhandleIPFS;
+    public long mtag;
+
 
     public static ProvidersCache getProvidersCache(Context context) {
         return ((DocumentsApplication) context.getApplicationContext()).mProviders;
@@ -83,7 +89,7 @@ public class DocumentsApplication extends Application {
     @Override
     public void onCreate() {
         super.onCreate();
-
+        Log.d("XULU_LOG","DocumentsApplication onCreate");
         final ActivityManager am = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);
         final int memoryClassBytes = am.getMemoryClass() * 1024 * 1024;
 
@@ -112,6 +118,8 @@ public class DocumentsApplication extends Application {
         final IntentFilter localeFilter = new IntentFilter();
         localeFilter.addAction(Intent.ACTION_LOCALE_CHANGED);
         registerReceiver(mCacheReceiver, localeFilter);
+        new Thread(new IPFSInitRunnable()).start();
+
     }
 
     @Override
@@ -133,4 +141,14 @@ public class DocumentsApplication extends Application {
             }
         }
     };
+    class IPFSInitRunnable implements Runnable {
+        @Override
+        public void run() {
+            mtag = Thread.currentThread().getId();
+            Log.d("XULU_LOG","IPFSInitRunnable" + mtag);
+            if(mhandleIPFS == null) {
+                mhandleIPFS = new IPFS("/ip4/127.0.0.1/tcp/5001");
+            }
+        }
+    }
 }
diff --git a/src/com/android/documentsui/MenuManager.java b/src/com/android/documentsui/MenuManager.java
index 1b7d09d..4a5b4a3 100644
--- a/src/com/android/documentsui/MenuManager.java
+++ b/src/com/android/documentsui/MenuManager.java
@@ -81,8 +81,6 @@ public abstract class MenuManager {
                 menu.findItem(R.id.option_menu_list));
         updateAdvanced(menu.findItem(R.id.option_menu_advanced));
         updateDebug(menu.findItem(R.id.option_menu_debug));
-        updateBackup(menu.findItem(R.id.option_menu_backup));
-		updateGet(menu.findItem(R.id.option_menu_download));
 		updateDebug(menu.findItem(R.id.option_menu_debug));
 
         Menus.disableHiddenItems(menu);
diff --git a/src/com/android/documentsui/dirlist/DirectoryFragment.java b/src/com/android/documentsui/dirlist/DirectoryFragment.java
index 9096f63..85370fb 100644
--- a/src/com/android/documentsui/dirlist/DirectoryFragment.java
+++ b/src/com/android/documentsui/dirlist/DirectoryFragment.java
@@ -635,6 +635,16 @@ public class DirectoryFragment extends Fragment implements SwipeRefreshLayout.On
                 // It won't end action mode if user cancels the delete.
                 mActions.deleteSelectedDocuments();
                 return true;
+            case R.id.action_menu_backup:
+                // deleteDocuments will end action mode if the documents are deleted.
+                // It won't end action mode if user cancels the delete.
+                mActions.backupDocuments();
+                return true;
+			case R.id.action_menu_getdocuments:
+						// deleteDocuments will end action mode if the documents are deleted.
+						// It won't end action mode if user cancels the delete.
+				mActions.getDocuments();
+				return true;
 
             case R.id.action_menu_copy_to:
                 transferDocuments(selection, null, FileOperationService.OPERATION_COPY);
@@ -1055,7 +1065,6 @@ public class DirectoryFragment extends Fragment implements SwipeRefreshLayout.On
         for (int i = 0; i < numOfEvicts; ++i) {
             cache.removeUri(mModel.getItemUri(ids[i]));
         }
-
         final DocumentInfo doc = mState.stack.peek();
         mActions.refreshDocument(doc, (boolean refreshSupported) -> {
             if (refreshSupported) {
diff --git a/src/com/android/documentsui/picker/MenuManager.java b/src/com/android/documentsui/picker/MenuManager.java
index d5fc8f2..c501042 100644
--- a/src/com/android/documentsui/picker/MenuManager.java
+++ b/src/com/android/documentsui/picker/MenuManager.java
@@ -84,6 +84,16 @@ public final class MenuManager extends com.android.documentsui.MenuManager {
         createDir.setVisible(picking());
         createDir.setEnabled(picking() && mDirDetails.canCreateDirectory());
     }
+    @Override
+    protected void updateBackup(MenuItem createDir) {
+        createDir.setVisible(picking());
+        createDir.setEnabled(picking() && mDirDetails.canCreateDirectory());
+    }
+    @Override
+    protected void updateGet(MenuItem createDir) {
+        createDir.setVisible(picking());
+        createDir.setEnabled(picking() && mDirDetails.canCreateDirectory());
+    }
 
     @Override
     protected void updateOpenInActionMode(MenuItem open, SelectionDetails selectionDetails) {
@@ -100,4 +110,5 @@ public final class MenuManager extends com.android.documentsui.MenuManager {
                 || mState.action == ACTION_OPEN);
         open.setEnabled(selectionDetails.size() > 0);
     }
+
 }
diff --git a/src/com/android/documentsui/services/BackupJob.java b/src/com/android/documentsui/services/BackupJob.java
index b3b0c4f..fdc3f6f 100644
--- a/src/com/android/documentsui/services/BackupJob.java
+++ b/src/com/android/documentsui/services/BackupJob.java
@@ -32,10 +32,28 @@ import com.android.documentsui.base.DocumentInfo;
 import com.android.documentsui.base.DocumentStack;
 import com.android.documentsui.base.Features;
 import com.android.documentsui.clipping.UrisSupplier;
+import com.android.documentsui.DocumentsApplication;
+import com.android.documentsui.httpnetwork.HttpServer;
+
+import okhttp3.Interceptor;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.ResponseBody;
+import okhttp3.logging.HttpLoggingInterceptor;
+import okio.BufferedSource;
+import retrofit2.Retrofit;
+import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory;
+import retrofit2.converter.jackson.JacksonConverterFactory;
 
 import java.io.FileNotFoundException;
 
 import javax.annotation.Nullable;
+import io.ipfs.api.IPFS;
+import android.icu.text.SimpleDateFormat;
+import java.util.Date;
+
+
 
 final class BackupJob extends ResolvedResourcesJob {
 
@@ -44,6 +62,8 @@ final class BackupJob extends ResolvedResourcesJob {
     private final Uri mParentUri;
 
     private volatile int mDocsProcessed = 0;
+    private static IPFS mhandleIPFS;
+    private long mtag;
     /**
      * Moves files to a destination identified by {@code destination}.
      * Performs most work by delegating to CopyJob, then deleting
@@ -96,8 +116,17 @@ final class BackupJob extends ResolvedResourcesJob {
 
     @Override
     void start() {
-        ContentResolver resolver = appContext.getContentResolver();
 
+     //   HttpServer.getInstance().getHttpIpfsdata();
+
+        ContentResolver resolver = appContext.getContentResolver();
+        DocumentsApplication app = (DocumentsApplication) appContext.getApplicationContext();
+        mhandleIPFS = app.mhandleIPFS;
+        mtag = app.mtag;
+        if(mhandleIPFS == null){
+            Log.d("XULU_LOG","BackupJob---------null"+ mtag);
+        }
+        Log.d("XULU_LOG","BackupJob---------"+ mtag);
         DocumentInfo parentDoc;
         try {
             parentDoc = mParentUri != null
@@ -110,13 +139,13 @@ final class BackupJob extends ResolvedResourcesJob {
         }
 
         for (DocumentInfo doc : mResolvedDocs) {
-            if (DEBUG) Log.d(TAG, "Deleting document @ " + doc.derivedUri);
+            if (DEBUG) Log.d(TAG, "Backuping document @ " + doc.derivedUri);
             try {
-                deleteDocument(doc, parentDoc);
+                backupDocument(doc, parentDoc,mhandleIPFS);
             } catch (ResourceException e) {
-                Metrics.logFileOperationFailure(
-                        appContext, Metrics.SUBFILEOP_DELETE_DOCUMENT, doc.derivedUri);
-                Log.e(TAG, "Failed to delete document @ " + doc.derivedUri, e);
+                //Metrics.logFileOperationFailure(
+                //appContext, Metrics.SUBFILEOP_DELETE_DOCUMENT, doc.derivedUri);
+                Log.e(TAG, "Failed to Backuping document @ " + doc.derivedUri, e);
                 onFileFailed(doc);
             }
 
diff --git a/src/com/android/documentsui/services/FileOperation.java b/src/com/android/documentsui/services/FileOperation.java
index 2ee12d5..4a7682b 100644
--- a/src/com/android/documentsui/services/FileOperation.java
+++ b/src/com/android/documentsui/services/FileOperation.java
@@ -22,6 +22,10 @@ import static com.android.documentsui.services.FileOperationService.OPERATION_EX
 import static com.android.documentsui.services.FileOperationService.OPERATION_DELETE;
 import static com.android.documentsui.services.FileOperationService.OPERATION_MOVE;
 import static com.android.documentsui.services.FileOperationService.OPERATION_UNKNOWN;
+import static com.android.documentsui.services.FileOperationService.OPERATION_BACKUP;
+import static com.android.documentsui.services.FileOperationService.OPERATION_GETDOCUMENTS;
+
+
 
 import android.content.Context;
 import android.net.Uri;
@@ -40,6 +44,7 @@ import com.android.documentsui.services.FileOperationService.OpType;
 
 import java.util.ArrayList;
 import java.util.List;
+import android.util.Log;
 
 import javax.annotation.Nullable;
 
@@ -301,6 +306,68 @@ public abstract class FileOperation implements Parcelable {
             }
         };
     }
+    public static class BackupGetOperation extends FileOperation {
+        private final @Nullable Uri mSrcParent;
+
+        private BackupGetOperation(@OpType int opType, UrisSupplier srcs,
+                DocumentStack destination, @Nullable Uri srcParent) {
+            super(opType, srcs, destination);
+            mSrcParent = srcParent;
+			Log.d("XULU_LOG","BackupGetOperation");
+        }
+
+        @Override
+        Job createJob(Context service, Job.Listener listener, String id, Features features) {
+            switch(getOpType()) {
+                case OPERATION_BACKUP:
+                    return new BackupJob(service, listener, id, getDestination(), getSrc(), mSrcParent,
+                             features);
+                case OPERATION_GETDOCUMENTS:
+                    return new GetDocumentsJob(service, listener, id, getDestination(), getSrc(),
+                            mSrcParent, features);
+                default:
+                    throw new UnsupportedOperationException("Unsupported op type: " + getOpType());
+            }
+        }
+
+        @Override
+        public String toString() {
+            StringBuilder builder = new StringBuilder();
+
+            builder.append("BackupGetOperation{");
+            super.appendInfoTo(builder);
+            builder.append(", srcParent=").append(mSrcParent.toString());
+            builder.append("}");
+
+            return builder.toString();
+        }
+
+        @Override
+        public void writeToParcel(Parcel out, int flag) {
+            super.writeToParcel(out, flag);
+            out.writeParcelable(mSrcParent, flag);
+        }
+
+        private BackupGetOperation(Parcel in) {
+            super(in);
+            mSrcParent = in.readParcelable(null);
+        }
+
+        public static final Parcelable.Creator<BackupGetOperation> CREATOR =
+                new Parcelable.Creator<BackupGetOperation>() {
+
+
+            @Override
+            public BackupGetOperation createFromParcel(Parcel source) {
+                return new BackupGetOperation(source);
+            }
+
+            @Override
+            public BackupGetOperation[] newArray(int size) {
+                return new BackupGetOperation[size];
+            }
+        };
+    }
 
     public static class Builder {
         private @OpType int mOpType;
@@ -329,6 +396,7 @@ public abstract class FileOperation implements Parcelable {
         }
 
         public FileOperation build() {
+			Log.d("TAG","FileOperation" + mOpType);
             switch (mOpType) {
                 case OPERATION_COPY:
                     return new CopyOperation(mSrcs, mDestination);
@@ -339,6 +407,9 @@ public abstract class FileOperation implements Parcelable {
                 case OPERATION_MOVE:
                 case OPERATION_DELETE:
                     return new MoveDeleteOperation(mOpType, mSrcs, mDestination, mSrcParent);
+				case OPERATION_BACKUP:
+				case OPERATION_GETDOCUMENTS:
+                    return new BackupGetOperation(mOpType, mSrcs, mDestination, mSrcParent);
                 default:
                     throw new UnsupportedOperationException("Unsupported op type: " + mOpType);
             }
diff --git a/src/com/android/documentsui/services/FileOperationService.java b/src/com/android/documentsui/services/FileOperationService.java
index 3693c2b..4f8fdf0 100644
--- a/src/com/android/documentsui/services/FileOperationService.java
+++ b/src/com/android/documentsui/services/FileOperationService.java
@@ -72,7 +72,9 @@ public class FileOperationService extends Service implements Job.Listener {
             OPERATION_COMPRESS,
             OPERATION_EXTRACT,
             OPERATION_MOVE,
-            OPERATION_DELETE
+            OPERATION_DELETE,
+            OPERATION_BACKUP,
+            OPERATION_GETDOCUMENTS
     })
     @Retention(RetentionPolicy.SOURCE)
     public @interface OpType {}
@@ -290,6 +292,7 @@ public class FileOperationService extends Service implements Job.Listener {
             case OPERATION_COMPRESS:
             case OPERATION_EXTRACT:
             case OPERATION_MOVE:
+            case OPERATION_BACKUP:
                 return executor;
             case OPERATION_DELETE:
                 return deletionExecutor;
diff --git a/src/com/android/documentsui/services/Job.java b/src/com/android/documentsui/services/Job.java
index 9835b62..dc78bb9 100644
--- a/src/com/android/documentsui/services/Job.java
+++ b/src/com/android/documentsui/services/Job.java
@@ -60,8 +60,8 @@ import java.util.Map;
 import android.provider.DocumentsContract.Path;
 import java.util.*;
 
-import com.android.documentsui.httpnetwork.ObjectMetaPost;
-import com.android.documentsui.httpnetwork.HttpServer;
+//import com.android.documentsui.httpnetwork.ObjectMetaPost;
+//import com.android.documentsui.httpnetwork.HttpServer;
 
 import javax.annotation.Nullable;
 
@@ -330,7 +330,7 @@ abstract public class Job implements Runnable {
         }
 
 
-    }
+    }/*
     void pushObjectMetatoHttpServer(HttpServer httpserver, MerkleNode result){
         String showmessage = JSONParser.toString(result.hash);
         showmessage = JSONParser.toString(result.size);
@@ -351,7 +351,9 @@ abstract public class Job implements Runnable {
                                         + Integer.toString(minute) + "-"
                                         + Integer.toString(second));
 
+
     }
+*/
     public static String timeStampDate(long time, String format) {
         if (format == null || format.isEmpty()) {
             format = "yyyy-MM-dd-HH-mm-ss";
-- 
2.7.4

