From ca61e69ee3da8f5d9cd52faa5b263144626283a3 Mon Sep 17 00:00:00 2001
From: koala <koala@brahmaos.io>
Date: Tue, 28 Aug 2018 17:08:55 +0800
Subject: [PATCH] Modify dialog for backup and getfiles

Change-Id: I0314ec1fbdadbbd6990bff1a15a44c58d08d62c7
Signed-off-by: koala <koala@brahmaos.io>
---
 res/menu/action_mode_menu.xml                      |   4 +-
 res/menu/activity.xml                              |   2 +-
 res/values/strings.xml                             |  29 ++++-
 .../android/documentsui/AbstractActionHandler.java |   6 +-
 src/com/android/documentsui/ActionHandler.java     |   4 +
 src/com/android/documentsui/MenuManager.java       |   4 +-
 .../android/documentsui/files/ActionHandler.java   |  51 +++++++-
 src/com/android/documentsui/files/MenuManager.java |  14 +-
 .../android/documentsui/services/BackupJob.java    | 145 +++++++++++++++++++++
 .../documentsui/services/FileOperationService.java |   2 +
 .../documentsui/services/GetDocumentsJob.java      | 145 +++++++++++++++++++++
 .../android/documentsui/ui/DialogController.java   |  42 ++++++
 src/com/android/documentsui/ui/MessageBuilder.java |  38 ++++++
 src/com/android/documentsui/ui/Snackbars.java      |   4 +
 14 files changed, 478 insertions(+), 12 deletions(-)
 create mode 100644 src/com/android/documentsui/services/BackupJob.java
 create mode 100644 src/com/android/documentsui/services/GetDocumentsJob.java

diff --git a/res/menu/action_mode_menu.xml b/res/menu/action_mode_menu.xml
index 9eeb2ae..d38f32c 100644
--- a/res/menu/action_mode_menu.xml
+++ b/res/menu/action_mode_menu.xml
@@ -78,8 +78,8 @@
         android:showAsAction="never"
         android:visible="false" />
   <item
-        android:id="@+id/action_menu_download"
-        android:title="@string/menu_download"
+        android:id="@+id/action_menu_getdocuments"
+        android:title="@string/menu_getdocuments"
         android:showAsAction="never"
         android:visible="false" />
 
diff --git a/res/menu/activity.xml b/res/menu/activity.xml
index 580137d..e825778 100644
--- a/res/menu/activity.xml
+++ b/res/menu/activity.xml
@@ -85,7 +85,7 @@
             android:visible="false" />
        <item
             android:id="@+id/option_menu_download"
-            android:title="@string/menu_download"
+            android:title="@string/menu_getdocuments"
             android:alphabeticShortcut="f"
             android:showAsAction="never"
             android:visible="false" />
diff --git a/res/values/strings.xml b/res/values/strings.xml
index 646504d..620fa88 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -75,7 +75,7 @@
     <!-- Menu item title that creates a new window in the activity [CHAR LIMIT=28] -->
     <string name="menu_new_window">New window</string>
     <string name="menu_backup">Backup files</string>
-    <string name="menu_download">Get files</string>
+    <string name="menu_getdocuments">Get files</string>
     <!-- Menu item title that cuts the selected documents to clipboard [CHAR LIMIT=28] -->
     <string name="menu_cut_to_clipboard">Cut</string>
     <!-- Menu item title that copies the selected documents to clipboard [CHAR LIMIT=28] -->
@@ -231,7 +231,11 @@
         <item quantity="one">Deleting <xliff:g id="count" example="1">%1$d</xliff:g> item.</item>
         <item quantity="other">Deleting <xliff:g id="count" example="3">%1$d</xliff:g> items.</item>
     </plurals>
-    <!-- Text shown for the undo button -->
+     <plurals name="backuping">
+        <item quantity="one">Backuping <xliff:g id="count" example="1">%1$d</xliff:g> item.</item>
+        <item quantity="other">Backuping <xliff:g id="count" example="3">%1$d</xliff:g> items.</item>
+    </plurals>
+   <!-- Text shown for the undo button -->
     <string name="undo">Undo</string>
     <!-- Text shown on the notification while DocumentsUI performs setup in preparation for copying files [CHAR LIMIT=32] -->
     <string name="copy_preparing">Preparing for copy\u2026</string>
@@ -365,6 +369,27 @@
         <item quantity="other">Delete <xliff:g id="count" example="3">%1$d</xliff:g> items?</item>
     </plurals>
 
+    <!-- Dialog text shown to users when asking if they want to backup a file (a confirmation) -->
+    <string name="backup_filename_confirmation_message">Backup \"<xliff:g id="name" example="cat.jpg">%1$s</xliff:g>\"?</string>
+    <!-- Dialog text shown to users when asking if they want to delete a folder (a confirmation) -->
+    <string name="backup_foldername_confirmation_message">Backup folder \"<xliff:g id="name" example="Photos">%1$s</xliff:g>\" and its contents?</string>
+    <!-- Dialog text shown to users when asking if they want to delete files (a confirmation). -->
+    <plurals name="backup_files_confirmation_message">
+        <item quantity="one">Backup <xliff:g id="count" example="1">%1$d</xliff:g> file?</item>
+        <item quantity="other">Backup <xliff:g id="count" example="3">%1$d</xliff:g> files?</item>
+    </plurals>
+    <!-- Dialog text shown to users when asking if they want to delete folders (a confirmation). -->
+    <plurals name="backup_folders_confirmation_message">
+        <item quantity="one">Backup <xliff:g id="count" example="1">%1$d</xliff:g> folder and its contents?</item>
+        <item quantity="other">Backup <xliff:g id="count" example="3">%1$d</xliff:g> folders and their contents?</item>
+    </plurals>
+    <!-- Dialog text shown to users when asking if they want to delete mixed type items: files and folders (a confirmation). -->
+    <plurals name="backup_items_confirmation_message">
+        <item quantity="one">Backup <xliff:g id="count" example="1">%1$d</xliff:g> item?</item>
+        <item quantity="other">Backup <xliff:g id="count" example="3">%1$d</xliff:g> items?</item>
+    </plurals>
+
+
     <!-- Shortcut label of Images root folder -->
     <string name="images_shortcut_label">Images</string>
 
diff --git a/src/com/android/documentsui/AbstractActionHandler.java b/src/com/android/documentsui/AbstractActionHandler.java
index 9e3f184..a895fc5 100644
--- a/src/com/android/documentsui/AbstractActionHandler.java
+++ b/src/com/android/documentsui/AbstractActionHandler.java
@@ -448,8 +448,10 @@ public abstract class AbstractActionHandler<T extends Activity & CommonAddons>
     public void backupDocuments() {
         throw new UnsupportedOperationException("Backup not supported!");
     }
-
-
+    @Override
+    public void getDocuments() {
+        throw new UnsupportedOperationException("getdocuments not supported!");
+    }
     @Override
     public void shareSelectedDocuments() {
         throw new UnsupportedOperationException("Share not supported!");
diff --git a/src/com/android/documentsui/ActionHandler.java b/src/com/android/documentsui/ActionHandler.java
index ca7d699..76e554f 100644
--- a/src/com/android/documentsui/ActionHandler.java
+++ b/src/com/android/documentsui/ActionHandler.java
@@ -138,6 +138,10 @@ public interface ActionHandler {
      * In general, selected = selection or single focused item
      */
 	void backupDocuments();
+	    /**
+     * In general, selected = selection or single focused item
+     */
+	void getDocuments();
 
     void shareSelectedDocuments();
 
diff --git a/src/com/android/documentsui/MenuManager.java b/src/com/android/documentsui/MenuManager.java
index 562d0cb..1b7d09d 100644
--- a/src/com/android/documentsui/MenuManager.java
+++ b/src/com/android/documentsui/MenuManager.java
@@ -64,8 +64,8 @@ public abstract class MenuManager {
         updateExtractTo(menu.findItem(R.id.action_menu_extract_to), selection);
         updateViewInOwner(menu.findItem(R.id.action_menu_view_in_owner), selection);
         updateInspector(menu.findItem(R.id.action_menu_inspector), selection);
-		updateBackup(menu.findItem(R.id.action_menu_backup));
-		updateGet(menu.findItem(R.id.action_menu_download));
+	updateBackup(menu.findItem(R.id.action_menu_backup));
+	updateGet(menu.findItem(R.id.action_menu_getdocuments));
 
 
         Menus.disableHiddenItems(menu);
diff --git a/src/com/android/documentsui/files/ActionHandler.java b/src/com/android/documentsui/files/ActionHandler.java
index 9072e28..0f6f612 100644
--- a/src/com/android/documentsui/files/ActionHandler.java
+++ b/src/com/android/documentsui/files/ActionHandler.java
@@ -341,7 +341,6 @@ public class ActionHandler<T extends Activity & Addons> extends AbstractActionHa
     public void backupDocuments() {
         Metrics.logUserAction(mActivity, Metrics.USER_ACTION_DELETE);
         Selection selection = getSelectedOrFocused();
-
         if (selection.isEmpty()) {
             return;
         }
@@ -385,6 +384,56 @@ public class ActionHandler<T extends Activity & Addons> extends AbstractActionHa
                     FileOperations.createJobId());
         };
 
+        mDialogs.confirmBackup(docs, result);
+    }
+    @Override
+    public void getDocuments() {
+        Metrics.logUserAction(mActivity, Metrics.USER_ACTION_DELETE);
+        Selection selection = getSelectedOrFocused();
+
+        if (selection.isEmpty()) {
+            return;
+        }
+
+        final @Nullable DocumentInfo srcParent = mState.stack.peek();
+
+        // Model must be accessed in UI thread, since underlying cursor is not threadsafe.
+        List<DocumentInfo> docs = mModel.getDocuments(selection);
+
+        ConfirmationCallback result = (@Result int code) -> {
+            // share the news with our caller, be it good or bad.
+            mActionModeAddons.finishOnConfirmed(code);
+
+            if (code != ConfirmationCallback.CONFIRM) {
+                return;
+            }
+
+            UrisSupplier srcs;
+            try {
+                srcs = UrisSupplier.create(
+                        selection,
+                        mModel::getItemUri,
+                        mClipStore);
+            } catch (Exception e) {
+                Log.e(TAG,"Failed to delete a file because we were unable to get item URIs.", e);
+                mDialogs.showFileOperationStatus(
+                        FileOperations.Callback.STATUS_FAILED,
+                        FileOperationService.OPERATION_GETDOCUMENTS,
+                        selection.size());
+                return;
+            }
+
+            FileOperation operation = new FileOperation.Builder()
+                    .withOpType(FileOperationService.OPERATION_GETDOCUMENTS)
+                    .withDestination(mState.stack)
+                    .withSrcs(srcs)
+                    .withSrcParent(srcParent == null ? null : srcParent.derivedUri)
+                    .build();
+
+            FileOperations.start(mActivity, operation, mDialogs::showFileOperationStatus,
+                    FileOperations.createJobId());
+        };
+
         mDialogs.confirmDelete(docs, result);
     }
 
diff --git a/src/com/android/documentsui/files/MenuManager.java b/src/com/android/documentsui/files/MenuManager.java
index 4754c6d..51cb2fc 100644
--- a/src/com/android/documentsui/files/MenuManager.java
+++ b/src/com/android/documentsui/files/MenuManager.java
@@ -237,9 +237,19 @@ public final class MenuManager extends com.android.documentsui.MenuManager {
     }
 
     @Override
-    protected void updateCreateDir(MenuItem createDir) {
+    protected void updateCreateDir(MenuItem storedecent) {
+        storedecent.setVisible(true);
+        storedecent.setEnabled(mDirDetails.canCreateDirectory());
+    }
+    @Override
+    protected void updateBackup(MenuItem Downdecent) {
+        Downdecent.setVisible(true);
+        Downdecent.setEnabled(true);
+    }
+	    @Override
+    protected void updateGet(MenuItem createDir) {
         createDir.setVisible(true);
-        createDir.setEnabled(mDirDetails.canCreateDirectory());
+        createDir.setEnabled(true);
     }
 
     @Override
diff --git a/src/com/android/documentsui/services/BackupJob.java b/src/com/android/documentsui/services/BackupJob.java
new file mode 100644
index 0000000..b3b0c4f
--- /dev/null
+++ b/src/com/android/documentsui/services/BackupJob.java
@@ -0,0 +1,145 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.documentsui.services;
+
+import static com.android.documentsui.base.Shared.DEBUG;
+import static com.android.documentsui.services.FileOperationService.OPERATION_DELETE;
+
+import android.app.Notification;
+import android.app.Notification.Builder;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.net.Uri;
+import android.util.Log;
+
+import com.android.documentsui.Metrics;
+import com.android.documentsui.R;
+import com.android.documentsui.base.DocumentInfo;
+import com.android.documentsui.base.DocumentStack;
+import com.android.documentsui.base.Features;
+import com.android.documentsui.clipping.UrisSupplier;
+
+import java.io.FileNotFoundException;
+
+import javax.annotation.Nullable;
+
+final class BackupJob extends ResolvedResourcesJob {
+
+    private static final String TAG = "BackupJob";
+
+    private final Uri mParentUri;
+
+    private volatile int mDocsProcessed = 0;
+    /**
+     * Moves files to a destination identified by {@code destination}.
+     * Performs most work by delegating to CopyJob, then deleting
+     * a file after it has been copied.
+     *
+     * @see @link {@link Job} constructor for most param descriptions.
+     */
+    BackupJob(Context service, Listener listener, String id, DocumentStack stack,
+            UrisSupplier srcs, @Nullable Uri srcParent, Features features) {
+        super(service, listener, id, OPERATION_DELETE, stack, srcs, features);
+        mParentUri = srcParent;
+    }
+
+    @Override
+    Builder createProgressBuilder() {
+        return super.createProgressBuilder(
+                service.getString(R.string.delete_notification_title),
+                R.drawable.ic_menu_delete,
+                service.getString(android.R.string.cancel),
+                R.drawable.ic_cab_cancel);
+    }
+
+    @Override
+    public Notification getSetupNotification() {
+        return getSetupNotification(service.getString(R.string.delete_preparing));
+    }
+
+    @Override
+    public Notification getProgressNotification() {
+        mProgressBuilder.setProgress(mResourceUris.getItemCount(), mDocsProcessed, false);
+        String format = service.getString(R.string.delete_progress);
+        mProgressBuilder.setSubText(
+                String.format(format, mDocsProcessed, mResourceUris.getItemCount()));
+
+        mProgressBuilder.setContentText(null);
+
+        return mProgressBuilder.build();
+    }
+
+    @Override
+    Notification getFailureNotification() {
+        return getFailureNotification(
+                R.plurals.delete_error_notification_title, R.drawable.ic_menu_delete);
+    }
+
+    @Override
+    Notification getWarningNotification() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    void start() {
+        ContentResolver resolver = appContext.getContentResolver();
+
+        DocumentInfo parentDoc;
+        try {
+            parentDoc = mParentUri != null
+                ? DocumentInfo.fromUri(resolver, mParentUri)
+                : null;
+        } catch (FileNotFoundException e) {
+          Log.e(TAG, "Failed to resolve parent from Uri: " + mParentUri + ". Cannot continue.", e);
+          failureCount += this.mResourceUris.getItemCount();
+          return;
+        }
+
+        for (DocumentInfo doc : mResolvedDocs) {
+            if (DEBUG) Log.d(TAG, "Deleting document @ " + doc.derivedUri);
+            try {
+                deleteDocument(doc, parentDoc);
+            } catch (ResourceException e) {
+                Metrics.logFileOperationFailure(
+                        appContext, Metrics.SUBFILEOP_DELETE_DOCUMENT, doc.derivedUri);
+                Log.e(TAG, "Failed to delete document @ " + doc.derivedUri, e);
+                onFileFailed(doc);
+            }
+
+            mDocsProcessed++;
+            if (isCanceled()) {
+                return;
+            }
+        }
+
+        Metrics.logFileOperation(service, operationType, mResolvedDocs, null);
+    }
+
+    @Override
+    public String toString() {
+        return new StringBuilder()
+                .append("DeleteJob")
+                .append("{")
+                .append("id=" + id)
+                .append(", uris=" + mResourceUris)
+                .append(", docs=" + mResolvedDocs)
+                .append(", srcParent=" + mParentUri)
+                .append(", location=" + stack)
+                .append("}")
+                .toString();
+    }
+}
diff --git a/src/com/android/documentsui/services/FileOperationService.java b/src/com/android/documentsui/services/FileOperationService.java
index 6379237..3693c2b 100644
--- a/src/com/android/documentsui/services/FileOperationService.java
+++ b/src/com/android/documentsui/services/FileOperationService.java
@@ -82,6 +82,8 @@ public class FileOperationService extends Service implements Job.Listener {
     public static final int OPERATION_COMPRESS = 3;
     public static final int OPERATION_MOVE = 4;
     public static final int OPERATION_DELETE = 5;
+    public static final int OPERATION_BACKUP = 6;
+    public static final int OPERATION_GETDOCUMENTS = 7;
 
     @IntDef({
             MESSAGE_PROGRESS,
diff --git a/src/com/android/documentsui/services/GetDocumentsJob.java b/src/com/android/documentsui/services/GetDocumentsJob.java
new file mode 100644
index 0000000..db5dbcd
--- /dev/null
+++ b/src/com/android/documentsui/services/GetDocumentsJob.java
@@ -0,0 +1,145 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.documentsui.services;
+
+import static com.android.documentsui.base.Shared.DEBUG;
+import static com.android.documentsui.services.FileOperationService.OPERATION_DELETE;
+
+import android.app.Notification;
+import android.app.Notification.Builder;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.net.Uri;
+import android.util.Log;
+
+import com.android.documentsui.Metrics;
+import com.android.documentsui.R;
+import com.android.documentsui.base.DocumentInfo;
+import com.android.documentsui.base.DocumentStack;
+import com.android.documentsui.base.Features;
+import com.android.documentsui.clipping.UrisSupplier;
+
+import java.io.FileNotFoundException;
+
+import javax.annotation.Nullable;
+
+final class GetDocumentsJob extends ResolvedResourcesJob {
+
+    private static final String TAG = "DeleteJob";
+
+    private final Uri mParentUri;
+
+    private volatile int mDocsProcessed = 0;
+    /**
+     * Moves files to a destination identified by {@code destination}.
+     * Performs most work by delegating to CopyJob, then deleting
+     * a file after it has been copied.
+     *
+     * @see @link {@link Job} constructor for most param descriptions.
+     */
+    GetDocumentsJob(Context service, Listener listener, String id, DocumentStack stack,
+            UrisSupplier srcs, @Nullable Uri srcParent, Features features) {
+        super(service, listener, id, OPERATION_DELETE, stack, srcs, features);
+        mParentUri = srcParent;
+    }
+
+    @Override
+    Builder createProgressBuilder() {
+        return super.createProgressBuilder(
+                service.getString(R.string.delete_notification_title),
+                R.drawable.ic_menu_delete,
+                service.getString(android.R.string.cancel),
+                R.drawable.ic_cab_cancel);
+    }
+
+    @Override
+    public Notification getSetupNotification() {
+        return getSetupNotification(service.getString(R.string.delete_preparing));
+    }
+
+    @Override
+    public Notification getProgressNotification() {
+        mProgressBuilder.setProgress(mResourceUris.getItemCount(), mDocsProcessed, false);
+        String format = service.getString(R.string.delete_progress);
+        mProgressBuilder.setSubText(
+                String.format(format, mDocsProcessed, mResourceUris.getItemCount()));
+
+        mProgressBuilder.setContentText(null);
+
+        return mProgressBuilder.build();
+    }
+
+    @Override
+    Notification getFailureNotification() {
+        return getFailureNotification(
+                R.plurals.delete_error_notification_title, R.drawable.ic_menu_delete);
+    }
+
+    @Override
+    Notification getWarningNotification() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    void start() {
+        ContentResolver resolver = appContext.getContentResolver();
+
+        DocumentInfo parentDoc;
+        try {
+            parentDoc = mParentUri != null
+                ? DocumentInfo.fromUri(resolver, mParentUri)
+                : null;
+        } catch (FileNotFoundException e) {
+          Log.e(TAG, "Failed to resolve parent from Uri: " + mParentUri + ". Cannot continue.", e);
+          failureCount += this.mResourceUris.getItemCount();
+          return;
+        }
+
+        for (DocumentInfo doc : mResolvedDocs) {
+            if (DEBUG) Log.d(TAG, "Deleting document @ " + doc.derivedUri);
+            try {
+                deleteDocument(doc, parentDoc);
+            } catch (ResourceException e) {
+                Metrics.logFileOperationFailure(
+                        appContext, Metrics.SUBFILEOP_DELETE_DOCUMENT, doc.derivedUri);
+                Log.e(TAG, "Failed to delete document @ " + doc.derivedUri, e);
+                onFileFailed(doc);
+            }
+
+            mDocsProcessed++;
+            if (isCanceled()) {
+                return;
+            }
+        }
+
+        Metrics.logFileOperation(service, operationType, mResolvedDocs, null);
+    }
+
+    @Override
+    public String toString() {
+        return new StringBuilder()
+                .append("DeleteJob")
+                .append("{")
+                .append("id=" + id)
+                .append(", uris=" + mResourceUris)
+                .append(", docs=" + mResolvedDocs)
+                .append(", srcParent=" + mParentUri)
+                .append(", location=" + stack)
+                .append("}")
+                .toString();
+    }
+}
diff --git a/src/com/android/documentsui/ui/DialogController.java b/src/com/android/documentsui/ui/DialogController.java
index 0de9868..7f1f296 100644
--- a/src/com/android/documentsui/ui/DialogController.java
+++ b/src/com/android/documentsui/ui/DialogController.java
@@ -36,11 +36,14 @@ import com.android.documentsui.services.FileOperations;
 
 import java.util.List;
 import javax.annotation.Nullable;
+import android.util.Log;
+
 
 public interface DialogController {
 
     // Dialogs used in FilesActivity
     void confirmDelete(List<DocumentInfo> docs, ConfirmationCallback callback);
+    void confirmBackup(List<DocumentInfo> docs, ConfirmationCallback callback);
     void showFileOperationStatus(int status, int opType, int docCount);
 
     /**
@@ -59,6 +62,7 @@ public interface DialogController {
 
     // Should be private, but Java doesn't like me treating an interface like a mini-package.
     public static final class RuntimeDialogController implements DialogController {
+		private static final String TAG = "RuntimeDialogController";
 
         private final Activity mActivity;
         private final MessageBuilder mMessages;
@@ -106,6 +110,41 @@ public interface DialogController {
                     });
             alertDialog.show();
         }
+        @Override
+        public void confirmBackup(List<DocumentInfo> docs, ConfirmationCallback callback) {
+            assert(!docs.isEmpty());
+
+            TextView message =
+                    (TextView) mActivity.getLayoutInflater().inflate(
+                            R.layout.dialog_delete_confirmation, null);
+            message.setText(mMessages.generateBackupMessage(docs));
+
+            // For now, we implement this dialog NOT
+            // as a fragment (which can survive rotation and have its own state),
+            // but as a simple runtime dialog. So rotating a device with an
+            // active delete dialog...results in that dialog disappearing.
+            // We can do better, but don't have cycles for it now.
+            final AlertDialog alertDialog = new AlertDialog.Builder(mActivity)
+                    .setView(message)
+                    .setPositiveButton(
+                            android.R.string.ok,
+                            new DialogInterface.OnClickListener() {
+                                @Override
+                                public void onClick(DialogInterface dialog, int id) {
+                                    callback.accept(ConfirmationCallback.CONFIRM);
+                                }
+                            })
+                    .setNegativeButton(android.R.string.cancel, null)
+                    .create();
+
+            alertDialog.setOnShowListener(
+                    (DialogInterface) -> {
+                        Button positive = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);
+                        positive.setFocusable(true);
+                        positive.requestFocus();
+                    });
+            alertDialog.show();
+        }
 
         @Override
         public void showFileOperationStatus(@Status int status, @OpType int opType,
@@ -146,6 +185,9 @@ public interface DialogController {
                 case FileOperationService.OPERATION_DELETE:
                     Snackbars.showDelete(mActivity, docCount);
                     break;
+                case FileOperationService.OPERATION_BACKUP:
+                    Snackbars.showBackup(mActivity, docCount);
+                    break;
                 default:
                     throw new UnsupportedOperationException("Unsupported Operation: " + opType);
             }
diff --git a/src/com/android/documentsui/ui/MessageBuilder.java b/src/com/android/documentsui/ui/MessageBuilder.java
index 4a4af29..2e8565e 100644
--- a/src/com/android/documentsui/ui/MessageBuilder.java
+++ b/src/com/android/documentsui/ui/MessageBuilder.java
@@ -79,6 +79,44 @@ public class MessageBuilder {
         return message;
     }
 
+    public String generateBackupMessage(List<DocumentInfo> docs) {
+        String message;
+        int dirsCount = 0;
+
+        for (DocumentInfo doc : docs) {
+            if (doc.isDirectory()) {
+                ++dirsCount;
+            }
+        }
+
+        if (docs.size() == 1) {
+            // Deleteing 1 file xor 1 folder in cwd
+
+            // Address b/28772371, where including user strings in message can result in
+            // broken bidirectional support.
+            String displayName = BidiFormatter.getInstance().unicodeWrap(docs.get(0).displayName);
+            message = dirsCount == 0
+                    ? mContext.getString(R.string.backup_filename_confirmation_message,
+                            displayName)
+                    : mContext.getString(R.string.backup_foldername_confirmation_message,
+                            displayName);
+        } else if (dirsCount == 0) {
+            // Deleting only files in cwd
+            message = Shared.getQuantityString(mContext,
+                    R.plurals.backup_files_confirmation_message, docs.size());
+        } else if (dirsCount == docs.size()) {
+            // Deleting only folders in cwd
+            message = Shared.getQuantityString(mContext,
+                    R.plurals.backup_folders_confirmation_message, docs.size());
+        } else {
+            // Deleting mixed items (files and folders) in cwd
+            message = Shared.getQuantityString(mContext,
+                    R.plurals.backup_items_confirmation_message, docs.size());
+        }
+        return message;
+    }
+
+
     public String generateListMessage(
             @DialogType int dialogType, @OpType int operationType, List<DocumentInfo> docs,
             List<Uri> uris) {
diff --git a/src/com/android/documentsui/ui/Snackbars.java b/src/com/android/documentsui/ui/Snackbars.java
index 8fa84dc..4cd644a 100644
--- a/src/com/android/documentsui/ui/Snackbars.java
+++ b/src/com/android/documentsui/ui/Snackbars.java
@@ -59,6 +59,10 @@ public final class Snackbars {
         CharSequence message = Shared.getQuantityString(activity, R.plurals.deleting, docCount);
         makeSnackbar(activity, message, Snackbar.LENGTH_SHORT).show();
     }
+    public static final void showBackup(Activity activity, int docCount) {
+        CharSequence message = Shared.getQuantityString(activity, R.plurals.backuping, docCount);
+        makeSnackbar(activity, message, Snackbar.LENGTH_SHORT).show();
+    }
 
     public static final void showOperationRejected(Activity activity) {
         makeSnackbar(activity, R.string.file_operation_rejected, Snackbar.LENGTH_SHORT).show();
-- 
2.7.4

